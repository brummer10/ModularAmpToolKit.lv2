
// tweedchamp_table generated by DK/circ_table_gen.py -- do not modify manually

 // variables used
 // --sig_max  1.400000
 // --table_div  17.145955
 // --table_op  1.000000

struct tabletweedchamp { // 1-dimensional function table
    float low;
    float high;
    float istep;
    int size;
    float data[];
};

template <int tab_size>
struct tabletweedchamp_imp {
    float low;
    float high;
    float istep;
    int size;
    float data[tab_size];
    operator tabletweedchamp&() const { return *(tabletweedchamp*)this; }
};

 static tabletweedchamp_imp<200> tweedchamp_table __rt_data = {
	0,0.833333,142.143,200, {
	0.000000000000,0.006111237450,0.012217276176,0.018318063519,0.024413536320,
	0.030503632363,0.036588288034,0.042667438290,0.048741016611,0.054808954961,
	0.060871183744,0.066927631759,0.072978226152,0.079022892372,0.085061554116,
	0.091094133286,0.097120549927,0.103140722181,0.109154566227,0.115161996226,
	0.121162924256,0.127157260259,0.133144911969,0.139125784856,0.145099782050,
	0.151066804278,0.157026749787,0.162979514276,0.168924990815,0.174863069769,
	0.180793638717,0.186716582366,0.192631782467,0.198539117728,0.204438463718,
	0.210329692777,0.216212673914,0.222087272712,0.227953351222,0.233810767856,
	0.239659377280,0.245499030297,0.251329573738,0.257150850335,0.262962698601,
	0.268764952706,0.274557442343,0.280339992597,0.286112423806,0.291874551421,
	0.297626185862,0.303367132365,0.309097190837,0.314816155691,0.320523815694,
	0.326219953796,0.331904346968,0.337576766027,0.343236975460,0.348884733249,
	0.354519790684,0.360141892181,0.365750775090,0.371346169504,0.376927798063,
	0.382495375757,0.388048609724,0.393587199050,0.399110834562,0.404619198623,
	0.410111964929,0.415588798295,0.421049354457,0.426493279857,0.431920211445,
	0.437329776474,0.442721592300,0.448095266189,0.453450395128,0.458786565633,
	0.464103353582,0.469400324044,0.474677031116,0.479933017782,0.485167815782,
	0.490380945485,0.495571915797,0.500740224075,0.505885356064,0.511006785865,
	0.516103975918,0.521176377021,0.526223428378,0.531244557679,0.536239181219,
	0.541206704056,0.546146520213,0.551058012920,0.555940554916,0.560793508795,
	0.565616227403,0.570408054315,0.575168324343,0.579896364141,0.584591492848,
	0.589253022831,0.593880260473,0.598472507057,0.603029059721,0.607549212483,
	0.612032257361,0.616477485560,0.620884188746,0.625251660391,0.629579197207,
	0.633866100646,0.638111678472,0.642315246402,0.646476129811,0.650593665487,
	0.654667203447,0.658696108778,0.662679763521,0.666617568576,0.670508945613,
	0.674353338992,0.678150217654,0.681899077006,0.685599440751,0.689250862672,
	0.692852928347,0.696405256782,0.699907501951,0.703359354229,0.706760541692,
	0.710110831300,0.713410029926,0.716657985230,0.719854586373,0.722999764551,
	0.726093493377,0.729135789056,0.732126710387,0.735066358590,0.737954876950,
	0.740792450278,0.743579304197,0.746315704270,0.749001954982,0.751638398546,
	0.754225413589,0.756763413723,0.759252845974,0.761694189156,0.764087952121,
	0.766434671935,0.768734912061,0.770989260413,0.773198327455,0.775362744220,
	0.777483160389,0.779560242350,0.781594671258,0.783587141166,0.785538357184,
	0.787449033664,0.789319892468,0.791151661307,0.792945072109,0.794700859495,
	0.796419759335,0.798102507340,0.799749837791,0.801362482313,0.802941168741,
	0.804486620059,0.805999553453,0.807480679396,0.808930700859,0.810350312553,
	0.811740200268,0.813101040290,0.814433498855,0.815738231706,0.817015883675,
	0.818267088340,0.819492467735,0.820692632097,0.821868179703,0.823019696675,
	0.824147756893,0.825252921921,0.826335740978,0.827396750886,0.828436476147,
	0.829455428951,0.830454108414,0.831433004887,0.832392591620,0.833333333333
	}
};

double always_inline tweedchampclip(double x) {
    double f = fabs(x);
    f = f * tweedchamp_table.istep;
    int i = static_cast<int>(f);
    if (i < 0) {
        f = tweedchamp_table.data[0];
    } else if (i >= tweedchamp_table.size-1) {
        f = tweedchamp_table.data[tweedchamp_table.size-1];
    } else {
    f -= i;
    f = tweedchamp_table.data[i]*(1-f) + tweedchamp_table.data[i+1]*f;
    }
    return copysign(f, x);
}

