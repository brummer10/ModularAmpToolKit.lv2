
// supersonic_table generated by DK/circ_table_gen.py -- do not modify manually

 // variables used
 // --sig_max  1.400000
 // --table_div  4.767644
 // --table_op  1.000000

struct tablesupersonic { // 1-dimensional function table
    float low;
    float high;
    float istep;
    int size;
    float data[];
};

template <int tab_size>
struct tablesupersonic_imp {
    float low;
    float high;
    float istep;
    int size;
    float data[tab_size];
    operator tablesupersonic&() const { return *(tablesupersonic*)this; }
};

 static tablesupersonic_imp<200> supersonic_table __rt_data = {
	0,0.473876,142.143,200, {
	0.000000000000,0.006466605213,0.012858816581,0.019177448751,0.025423284864,
	0.031597122679,0.037699728869,0.043731884655,0.049694340511,0.055587861377,
	0.061413181917,0.067171051112,0.072862187973,0.078487325845,0.084047168487,
	0.089542433800,0.094973810509,0.100342001425,0.105647680475,0.110891535663,
	0.116074226397,0.121196426084,0.126258779875,0.131261946839,0.136206558136,
	0.141093258737,0.145922666038,0.150695411198,0.155412098115,0.160073344268,
	0.164679740327,0.169231890391,0.173730372097,0.178175776397,0.182568668151,
	0.186909625336,0.191199200233,0.195437958224,0.199626439157,0.203765196224,
	0.207854756665,0.211895661417,0.215888426258,0.219833579893,0.223731626392,
	0.227583082665,0.231388441288,0.235148207589,0.238862862863,0.242532901071,
	0.246158792433,0.249741019753,0.253280042385,0.256776332185,0.260230337845,
	0.263642520480,0.267013318324,0.270343181952,0.273632539345,0.276881830740,
	0.280091474062,0.283261899413,0.286393514859,0.289486740564,0.292541974930,
	0.295559628382,0.298540089851,0.301483760216,0.304391019131,0.307262258118,
	0.310097847746,0.312898170373,0.315663587665,0.318394473007,0.321091179350,
	0.323754071291,0.326383493249,0.328979801217,0.331543331266,0.334074430966,
	0.336573428218,0.339040662352,0.341476453277,0.343881132259,0.346255011391,
	0.348598414052,0.350911644693,0.353195018977,0.355448833886,0.357673397542,
	0.359868999624,0.362035940882,0.364174503858,0.366284982102,0.368367651183,
	0.370422797612,0.372450690151,0.374451608434,0.376425814579,0.378373581501,
	0.380295164831,0.382190830928,0.384060829088,0.385905419272,0.387724844597,
	0.389519358777,0.391289198901,0.393034612591,0.394755831055,0.396453095971,
	0.398126632818,0.399776677475,0.401403449833,0.403007180122,0.404588082787,
	0.406146382549,0.407682288550,0.409196020140,0.410687781296,0.412157786138,
	0.413606233612,0.415033332744,0.416439277582,0.417824272192,0.419188505856,
	0.420532177810,0.421855472700,0.423158585061,0.424441695028,0.425704992563,
	0.426948653417,0.428172863102,0.429377793105,0.430563624612,0.431730524967,
	0.432878671149,0.434008226476,0.435119363841,0.436212242650,0.437287031825,
	0.438343886975,0.439382973162,0.440404442312,0.441408455739,0.442395161793,
	0.443364718150,0.444317269690,0.445252970559,0.446171962274,0.447074395555,
	0.447960408657,0.448830148978,0.449683751611,0.450521360734,0.451343108378,
	0.452149135595,0.452939571455,0.453714553982,0.454474209374,0.455218672724,
	0.455948067453,0.456662525814,0.457362168540,0.458047125137,0.458717513737,
	0.459373461186,0.460015083106,0.460642503768,0.461255836365,0.461855202682,
	0.462440713565,0.463012488393,0.463570635747,0.464115272681,0.464646505591,
	0.465164449284,0.465669208047,0.466160894516,0.466639610944,0.467105467874,
	0.467558565597,0.467999012634,0.468426907385,0.468842356421,0.469245456321,
	0.469636311775,0.470015017608,0.470381676696,0.470736382175,0.471079235173,
	0.471410327200,0.471729757700,0.472037616620,0.472334001779,0.472619001622,
	0.472892712403,0.473155221121,0.473406622526,0.473647002226,0.473876453520
	}
};

double always_inline supersonicclip(double x) {
    double f = fabs(x);
    f = f * supersonic_table.istep;
    int i = static_cast<int>(f);
    if (i < 0) {
        f = supersonic_table.data[0];
    } else if (i >= supersonic_table.size-1) {
        f = supersonic_table.data[supersonic_table.size-1];
    } else {
    f -= i;
    f = supersonic_table.data[i]*(1-f) + supersonic_table.data[i+1]*f;
    }
    return copysign(f, x);
}

